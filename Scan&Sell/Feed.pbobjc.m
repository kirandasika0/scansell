// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Feed.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Feed.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FeedRoot

@implementation FeedRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - FeedRoot_FileDescriptor

static GPBFileDescriptor *FeedRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"sale"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Book

@implementation Book

@dynamic hasId_p, id_p;
@dynamic hasFullTitle, fullTitle;
@dynamic hasLink, link;
@dynamic hasUniformTitle, uniformTitle;
@dynamic hasEan13, ean13;

typedef struct Book__storage_ {
  uint32_t _has_storage_[1];
  NSString *fullTitle;
  NSString *link;
  NSString *uniformTitle;
  NSString *ean13;
  int64_t id_p;
} Book__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Book_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Book__storage_, id_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fullTitle",
        .dataTypeSpecific.className = NULL,
        .number = Book_FieldNumber_FullTitle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Book__storage_, fullTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "link",
        .dataTypeSpecific.className = NULL,
        .number = Book_FieldNumber_Link,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Book__storage_, link),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uniformTitle",
        .dataTypeSpecific.className = NULL,
        .number = Book_FieldNumber_UniformTitle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Book__storage_, uniformTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ean13",
        .dataTypeSpecific.className = NULL,
        .number = Book_FieldNumber_Ean13,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Book__storage_, ean13),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Book class]
                                     rootClass:[FeedRoot class]
                                          file:FeedRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Book__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaleImage

@implementation SaleImage

@dynamic hasSaleId, saleId;
@dynamic hasImgType, imgType;
@dynamic hasImageName, imageName;
@dynamic hasCreatedAt, createdAt;

typedef struct SaleImage__storage_ {
  uint32_t _has_storage_[1];
  int32_t createdAt;
  NSString *imgType;
  NSString *imageName;
  int64_t saleId;
} SaleImage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "saleId",
        .dataTypeSpecific.className = NULL,
        .number = SaleImage_FieldNumber_SaleId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaleImage__storage_, saleId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "imgType",
        .dataTypeSpecific.className = NULL,
        .number = SaleImage_FieldNumber_ImgType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SaleImage__storage_, imgType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imageName",
        .dataTypeSpecific.className = NULL,
        .number = SaleImage_FieldNumber_ImageName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SaleImage__storage_, imageName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = SaleImage_FieldNumber_CreatedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SaleImage__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaleImage class]
                                     rootClass:[FeedRoot class]
                                          file:FeedRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaleImage__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Sale

@implementation Sale

@dynamic hasId_p, id_p;
@dynamic hasSellerId, sellerId;
@dynamic hasSellerUsername, sellerUsername;
@dynamic hasBook, book;
@dynamic hasDesription, desription;
@dynamic hasPrice, price;
@dynamic hasLocation, location;
@dynamic hasLatitude, latitude;
@dynamic hasLongitude, longitude;
@dynamic hasSold, sold;
@dynamic hasCategories, categories;
@dynamic hasCreatedAt, createdAt;
@dynamic hasExtraInfo, extraInfo;
@dynamic imagesArray, imagesArray_Count;

typedef struct Sale__storage_ {
  uint32_t _has_storage_[1];
  int32_t createdAt;
  NSString *sellerId;
  NSString *sellerUsername;
  Book *book;
  NSString *desription;
  NSString *price;
  NSString *location;
  NSString *categories;
  NSString *extraInfo;
  NSMutableArray *imagesArray;
  int64_t id_p;
  double latitude;
  double longitude;
} Sale__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = Sale_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Sale__storage_, id_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sellerId",
        .dataTypeSpecific.className = NULL,
        .number = Sale_FieldNumber_SellerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Sale__storage_, sellerId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sellerUsername",
        .dataTypeSpecific.className = NULL,
        .number = Sale_FieldNumber_SellerUsername,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Sale__storage_, sellerUsername),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "book",
        .dataTypeSpecific.className = GPBStringifySymbol(Book),
        .number = Sale_FieldNumber_Book,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Sale__storage_, book),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "desription",
        .dataTypeSpecific.className = NULL,
        .number = Sale_FieldNumber_Desription,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Sale__storage_, desription),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "price",
        .dataTypeSpecific.className = NULL,
        .number = Sale_FieldNumber_Price,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Sale__storage_, price),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "location",
        .dataTypeSpecific.className = NULL,
        .number = Sale_FieldNumber_Location,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Sale__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = Sale_FieldNumber_Latitude,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Sale__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = Sale_FieldNumber_Longitude,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Sale__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sold",
        .dataTypeSpecific.className = NULL,
        .number = Sale_FieldNumber_Sold,
        .hasIndex = 9,
        .offset = 10,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "categories",
        .dataTypeSpecific.className = NULL,
        .number = Sale_FieldNumber_Categories,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Sale__storage_, categories),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.className = NULL,
        .number = Sale_FieldNumber_CreatedAt,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(Sale__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "extraInfo",
        .dataTypeSpecific.className = NULL,
        .number = Sale_FieldNumber_ExtraInfo,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(Sale__storage_, extraInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "imagesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SaleImage),
        .number = Sale_FieldNumber_ImagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Sale__storage_, imagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Sale class]
                                     rootClass:[FeedRoot class]
                                          file:FeedRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Sale__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Feed

@implementation Feed

@dynamic salesArray, salesArray_Count;

typedef struct Feed__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *salesArray;
} Feed__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "salesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Sale),
        .number = Feed_FieldNumber_SalesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Feed__storage_, salesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Feed class]
                                     rootClass:[FeedRoot class]
                                          file:FeedRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Feed__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
